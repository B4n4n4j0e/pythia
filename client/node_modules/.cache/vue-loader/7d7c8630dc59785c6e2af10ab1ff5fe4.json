{"remainingRequest":"/home/someone/projects/pythia/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/someone/projects/pythia/client/src/components/chartComponents/LineChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/someone/projects/pythia/client/src/components/chartComponents/LineChart.vue","mtime":1643631803240},{"path":"/home/someone/projects/pythia/client/node_modules/cache-loader/dist/cjs.js","mtime":1643623769878},{"path":"/home/someone/projects/pythia/client/node_modules/babel-loader/lib/index.js","mtime":1643623769914},{"path":"/home/someone/projects/pythia/client/node_modules/cache-loader/dist/cjs.js","mtime":1643623769878},{"path":"/home/someone/projects/pythia/client/node_modules/vue-loader/lib/index.js","mtime":1643623769500}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["LineChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAafile":"LineChart.vue","sourceRoot":"src/components/chartComponents","sourcesContent":["<template>\n  <v-card>\n    <ChartControls v-bind:chartNumber=\"chartNumber\" class=\"mb-0\" />\n    <svg :id=\"id\" viewBox=\"0 0 960 450\"></svg>\n    <v-progress-circular\n      v-if=\"loading && !isFrozen\"\n      indeterminate\n      color=\"success\"\n    ></v-progress-circular>\n  </v-card>\n</template>\n\n<script>\nimport * as d3 from \"d3\";\nimport ChartControls from \"../ChartControls.vue\";\n\nexport default {\n  components: { ChartControls },\n\n  name: \"LineChart\",\n  props: {\n    data: {\n      required: true,\n    },\n    width: {\n      default: 960,\n      type: Number,\n    },\n    height: {\n      default: 450,\n      type: Number,\n    },\n    chartNumber: {\n      required: true,\n      type: Number,\n    },\n    isSummary: {\n      required: true,\n      type: Boolean,\n    },\n    isFrozen: {\n      required: true,\n      type: Boolean,\n    },\n  },\n  mounted() {\n    this.createLineChart();\n    this.updateChart();\n  },\n\n  data: () => ({\n    margin: { top: 10, right: 40, bottom: 30, left: 40 },\n    time: [],\n  }),\n\n  computed: {\n    id() {\n      return \"chart\" + this.chartNumber.toString();\n    },\n    payload() {\n      return this.data.payload;\n    },\n    loading() {\n      return this.data.loading;\n    },\n    chartWidth() {\n      return this.width - this.margin.left - this.margin.right;\n    },\n    chartHeight() {\n      return this.height - this.margin.top - this.margin.bottom;\n    },\n  },\n\n  watch: {\n    payload: function () {\n      if (this.isFrozen) {\n        return;\n      }\n      this.updateChart();\n    },\n    isFrozen: function () {\n      if (this.isFrozen) {\n        return;\n      } else {\n        this.updateChart();\n      }\n    },\n  },\n\n  methods: {\n    /**\n     * Creates groups for chart and brush definition\n     */\n    createLineChart() {\n      var svg = d3\n        .select(\"#\" + this.id)\n        .append(\"g\")\n        .attr(\n          \"transform\",\n          \"translate(\" + this.margin.left + \",\" + this.margin.top + \")\"\n        );\n\n      svg.append(\"g\").attr(\"class\", \"axis\" + this.chartNumber);\n      svg.append(\"g\").attr(\"class\", \"defs\" + this.chartNumber);\n\n      svg.append(\"g\").attr(\"class\", \"content\" + this.chartNumber);\n\n      svg\n        .select(\"g.axis\" + this.chartNumber)\n        .append(\"g\")\n        .attr(\"class\", \"yAxis\" + this.chartNumber);\n\n      svg\n        .select(\"g.axis\" + this.chartNumber)\n        .append(\"g\")\n        .attr(\"class\", \"xAxis\" + this.chartNumber);\n\n      svg\n        .select(\".defs\" + this.chartNumber)\n        .append(\"defs\")\n        .append(\"svg:clipPath\")\n        .attr(\"id\", \"clip\" + this.chartNumber)\n        .append(\"svg:rect\")\n        .attr(\"width\", this.chartWidth)\n        .attr(\"height\", this.chartHeight)\n        .attr(\"x\", 0)\n        .attr(\"y\", 0);\n\n      svg\n        .select(\".content\" + this.chartNumber)\n        .append(\"g\")\n        .attr(\"clip-path\", \"url(#clip\" + this.chartNumber + \")\")\n        .append(\"path\")\n        .attr(\"class\", \"line\") // I add the class line to be able to modify this line later on.\n        .attr(\"fill\", \"none\")\n        .style(\"stroke\", \"var(--v-tertiary-base)\")\n        .attr(\"stroke-width\", 1.5);\n\n      svg\n        .select(\".content\" + this.chartNumber)\n        .append(\"g\")\n        .attr(\"class\", \"brush\");\n    },\n\n    /**\n     * Inserts data to chart and creates chart objects\n     */\n    updateChart() {\n      var vm = this;\n      svg = d3.select(\"#\" + this.id);\n\n      var svg = d3.select(\"#\" + this.id);\n\n      var domain = d3.extent(this.payload, function (d) {\n        return d.ts;\n      });\n      // configure x,y scaling\n      var scX = d3.scaleTime().range([0, this.chartWidth]).domain(domain);\n      var scY = d3\n        .scaleLinear()\n        .domain([\n          0,\n          d3.max(this.payload, function (d) {\n            return +d.value;\n          }),\n        ])\n        .range([this.chartHeight, 0]);\n      // add brush and initialize with position 0,0\n      var brush = d3\n        .brushX()\n        .extent([\n          [0, 0],\n          [this.chartWidth, this.chartHeight],\n        ])\n        .on(\"end\", updateChart);\n\n      // create line\n      var line = d3\n        .select(\".content\" + this.chartNumber)\n        .select(\"g\")\n        .datum(this.payload);\n\n      //transition if data is updated\n      line\n        .select(\"path\")\n        .transition()\n        .duration(1000)\n        .attr(\n          \"d\",\n          d3\n            .line()\n            .x(function (d) {\n              return scX(d.ts);\n            })\n            .y(function (d) {\n              return scY(d.value);\n            })\n        );\n\n      svg.select(\".brush\").call(brush);\n      svg.select(\".brush\").call(brush.move, null);\n\n      //Draws axis if payload exists, otherwise deletes them\n      if (this.payload.length > 0) {\n        d3.select(\"g.xAxis\" + this.chartNumber)\n          .attr(\"transform\", \"translate(0,\" + this.chartHeight + \")\")\n          .transition()\n          .duration(1000)\n          .call(d3.axisBottom(scX));\n\n        d3.select(\"g.yAxis\" + this.chartNumber)\n          .transition()\n          .duration(1000)\n          .call(d3.axisLeft(scY).ticks(10, \"s\"));\n      } else {\n        d3.select(\"g.yAxis\" + this.chartNumber)\n          .selectAll(\"*\")\n          .remove();\n        d3.select(\"g.xAxis\" + this.chartNumber)\n          .selectAll(\"*\")\n          .remove();\n      }\n      // Reinitialize the chart on double click\n      svg.on(\"dblclick\", function () {\n        if (vm.isFrozen) {\n          return;\n        }\n        var time = vm.time.pop();\n        if (time) {\n          updateData(time.startTime, time.endTime);\n        }\n      });\n\n      /**\n       * Helperfunction for brush functionality\n       */\n      var idleTimeout;\n      function idled() {\n        idleTimeout = null;\n      }\n\n      function updateChart(event) {\n        if (vm.isFrozen) {\n          return;\n        }\n\n        var extent = event.selection;\n        // if something is selected, set new boundaries. Otherwise set initial domain\n        if (!extent) {\n          if (!idleTimeout) return (idleTimeout = setTimeout(idled, 350)); // This allows to wait a little bit\n          scX.domain([4, 8]);\n        } else {\n          // Push time data to access later. For go back functionality\n          vm.time.push({\n            startTime: vm.$store.state.startTime,\n            endTime: vm.$store.state.endTime,\n          });\n          // rescale axis\n          var startTime = scX.invert(extent[0]).getTime();\n          var endTime = scX.invert(extent[1]).getTime();\n          // request data for new time boundaries\n          updateData(startTime, endTime);\n          // remove brush area\n          svg.select(\".brush\").call(brush.move, null);\n        }\n      }\n\n      /**\n       * Set new start time, end time and get data for new timespan\n       */\n      function updateData(startTime, endTime) {\n        if (vm.isFrozen) {\n          return;\n        }\n        vm.$store.dispatch(\"setStartTime\", startTime);\n        vm.$store.dispatch(\"setEndTime\", endTime).then(() => {\n          vm.$store.dispatch(\"summaryData/getDataByTime\");\n          vm.$store.dispatch(\"detailData/getDataByTime\");\n        });\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\ng.tick {\n  fill: black;\n}\n</style>"]}]}