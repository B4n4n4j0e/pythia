{"remainingRequest":"/home/someone/projects/pythia/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/someone/projects/pythia/client/src/components/TopNavigation.vue?vue&type=style&index=0&id=19f9f8c9&scoped=true&lang=css&","dependencies":[{"path":"/home/someone/projects/pythia/client/src/components/TopNavigation.vue","mtime":1643569775827},{"path":"/home/someone/projects/pythia/client/node_modules/css-loader/dist/cjs.js","mtime":1643623769364},{"path":"/home/someone/projects/pythia/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1643623769765},{"path":"/home/someone/projects/pythia/client/node_modules/postcss-loader/src/index.js","mtime":1643623769364},{"path":"/home/someone/projects/pythia/client/node_modules/cache-loader/dist/cjs.js","mtime":1643623769878},{"path":"/home/someone/projects/pythia/client/node_modules/vue-loader/lib/index.js","mtime":1643623769500}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj4+PiAudi10ZXh0LWZpZWxkIHsKICB3aWR0aDogMTEwcHg7Cn0KLnRleHRCdXR0b25BY3RpdmUgewogIHRleHQtdHJhbnNmb3JtOiBub25lOwp9Ci50ZXh0QnV0dG9uSW5hY3RpdmUgewogIHRleHQtdHJhbnNmb3JtOiBub25lOwogIG9wYWNpdHk6IDAuNTsKfQo="},{"version":3,"sources":["TopNavigation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TopNavigation.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-app-bar clipped-right app>\n    <router-link to=\"/\">\n      <v-img\n        position=\"left\"\n        max-height=\"80px\"\n        max-width=\"90px\"\n        contain\n        src=\"../assets/logo_light2.png\"\n      >\n      </v-img>\n    </router-link>\n    <v-btn to=\"/configuration\" text>Configuration</v-btn>\n    <v-btn\n      :loading=\"pCAPLoading\"\n      :disabled=\"pCAPLoading\"\n      @click=\"uploadPCAP\"\n      text\n      >import PCAP</v-btn\n    >\n    <input\n      ref=\"uploadInput\"\n      class=\"d-none\"\n      :loading=\"isSelecting\"\n      type=\"file\"\n      @change=\"onFileInput\"\n    />\n    <v-menu top :close-on-content-click=\"false\" v-model=\"dashboardDialog\">\n      <template v-slot:activator=\"{ on, attrs }\">\n        <v-btn text v-bind=\"attrs\" v-on=\"on\">Dashboard options </v-btn>\n      </template>\n      <v-list nav flat>\n        <v-list-item tile v-for=\"(item, index) in dashboards\" :key=\"index\">\n          <v-btn\n            :class=\"\n              currentDashboard == item.name\n                ? 'textButtonActive'\n                : 'textButtonInactive'\n            \"\n            @click=\"switchDashboard(item.name)\"\n            text\n            >{{ item.name }}</v-btn\n          >\n          <v-spacer></v-spacer>\n          <v-btn @click=\"removeDashboard(item.name)\" text color=\"error\"\n            >X</v-btn\n          >\n        </v-list-item>\n        <v-list-item>\n          <v-text-field\n            class=\"mr-2\"\n            v-model=\"dashboardName\"\n            label=\"Add new dashboard\"\n          ></v-text-field>\n          <v-btn @click=\"addDashboard\" class=\"ml-3\" color=\"success\">+</v-btn>\n        </v-list-item>\n      </v-list>\n    </v-menu>\n    <v-menu top :close-on-content-click=\"false\" v-model=\"modeDialog\">\n      <template v-slot:activator=\"{ on, attrs }\">\n        <v-btn text v-bind=\"attrs\" v-on=\"on\">Mode</v-btn>\n      </template>\n      <v-list nav flat>\n        <v-list-item tile v-for=\"(item, index) in modes\" :key=\"index\">\n          <v-btn\n            :class=\"\n              currentMode == item ? 'textButtonActive' : 'textButtonInactive'\n            \"\n            @click=\"switchMode(item)\"\n            text\n            >{{ item }}</v-btn\n          >\n        </v-list-item>\n      </v-list>\n    </v-menu>\n    <v-spacer></v-spacer>\n    <div v-if=\"updateInfo\">\n      <v-tooltip bottom>\n        <template v-slot:activator=\"{ on, attrs }\">\n          <v-icon v-bind=\"attrs\" v-on=\"on\" class=\"mr-2\" large\n            >mdi-information-outline</v-icon\n          >\n        </template>\n        <span>Click Update to apply new filter</span>\n      </v-tooltip>\n\n      <v-btn class=\"ml-2\" @click=\"update\" color=\"primary\">Update</v-btn>\n    </div>\n\n    <v-spacer></v-spacer>\n\n    <v-tooltip bottom>\n      <template v-slot:activator=\"{ on, attrs }\">\n        <v-btn icon @click=\"setDarkmode\" v-bind=\"attrs\" v-on=\"on\">\n          <v-icon large>mdi-theme-light-dark</v-icon>\n        </v-btn>\n      </template>\n      <span>Dark Mode</span>\n    </v-tooltip>\n  </v-app-bar>\n</template>\n\n<script>\nexport default {\n  data: () => ({\n    dashboardDialog: false,\n    modeDialog: false,\n    isSelecting: false,\n    selectedFile: null,\n    dashboardName: \"\",\n    modes: [\"Sensor\", \"PCAP\"],\n  }),\n\n  computed: {\n    dashboards() {\n      return this.$store.state.dashboards;\n    },\n    currentDashboard() {\n      return this.$store.state.currentDashboard;\n    },\n    currentMode() {\n      return this.$store.state.mode;\n    },\n    pCAPLoading() {\n      return this.$store.state.pCAPLoading;\n    },\n    updateInfo() {\n      return this.$store.getters[\"numberOfChanges\"] > 0;\n    },\n  },\n\n  methods: {\n    update() {\n      this.$store.dispatch(\"getAllData\");\n    },\n\n    addDashboard() {\n      if (this.dashboardName == \"\") {\n        return;\n      }\n      var dashboardDuplicates = this.dashboards.filter(\n        (elem) => elem.name == this.dashboardName\n      );\n      if (dashboardDuplicates.length > 0) {\n    let snackBarOptions = {\n              message: \"Name already exists, please choose another name\",\n              color: \"error\",\n              timeout: 2000,\n            };\n            this.$store.dispatch(\"triggerSnackbar\", snackBarOptions);\n      } else {\n        this.$store.dispatch(\"addDashboard\", this.dashboardName);\n        this.dashboardName = \"\";\n      }\n    },\n    removeDashboard(name) {\n      this.$store.dispatch(\"removeDashboard\", name);\n    },\n    switchDashboard(name) {\n      this.$store.dispatch(\"switchDashboard\", name).finally(() => {\n        this.dashboardDialog = false;\n      });\n    },\n\n    switchMode(name) {\n      this.$store\n        .dispatch(\"switchMode\", name)\n        .finally(() => (this.modeDialog = false));\n    },\n\n    setDarkmode() {\n      this.$vuetify.theme.dark = !this.$vuetify.theme.dark;\n      localStorage.setItem(\"dark_theme\", this.$vuetify.theme.dark.toString());\n    },\n    uploadPCAP() {\n      if (this.$store.state.mode == \"PCAP\") {\n        let snackBarOptions = {\n          message: \"Please switch to sensor mode to upload a pcap-file\",\n          color: \"error\",\n          timeout: 2000,\n        };\n        this.$store.dispatch(\"triggerSnackbar\", snackBarOptions);\n        return;\n      }\n      this.isSelecting = true;\n      window.addEventListener(\n        \"focus\",\n        () => {\n          this.isSelecting = false;\n        },\n        { once: true }\n      );\n      this.$refs.uploadInput.click();\n    },\n\n    onFileInput(e) {\n      this.selectedFile = e.target.files[0];\n      var formData = new FormData();\n      formData.append(\"file\", this.selectedFile);\n      this.$store.dispatch(\"uploadPCAP\", formData);\n    },\n  },\n};\n</script>\n<style scoped>\n>>> .v-text-field {\n  width: 110px;\n}\n.textButtonActive {\n  text-transform: none;\n}\n.textButtonInactive {\n  text-transform: none;\n  opacity: 0.5;\n}\n</style>"]}]}