{"remainingRequest":"/home/someone/projects/pythia/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/someone/projects/pythia/client/src/components/chartComponents/TreeMap.vue?vue&type=style&index=0&id=65bd47e3&scoped=true&lang=css&","dependencies":[{"path":"/home/someone/projects/pythia/client/src/components/chartComponents/TreeMap.vue","mtime":1643620562565},{"path":"/home/someone/projects/pythia/client/node_modules/css-loader/dist/cjs.js","mtime":1643623769364},{"path":"/home/someone/projects/pythia/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1643623769765},{"path":"/home/someone/projects/pythia/client/node_modules/postcss-loader/src/index.js","mtime":1643623769364},{"path":"/home/someone/projects/pythia/client/node_modules/cache-loader/dist/cjs.js","mtime":1643623769878},{"path":"/home/someone/projects/pythia/client/node_modules/vue-loader/lib/index.js","mtime":1643623769500}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmRpdi50b29sdGlwIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIHBhZGRpbmc6IDJweDsKICBmb250OiAxMnB4IHNhbnMtc2VyaWY7CiAgYmFja2dyb3VuZDogYmxhY2s7CiAgYm9yZGVyOiAwcHg7CiAgYm9yZGVyLXJhZGl1czogOHB4OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwogIG9wYWNpdHk6IDA7Cn0K"},{"version":3,"sources":["TreeMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TreeMap.vue","sourceRoot":"src/components/chartComponents","sourcesContent":["<template>\n  <v-card>\n    <ChartControls\n      v-bind:data=\"data\"\n      v-bind:chartNumber=\"chartNumber\"\n      class=\"mb-0\"\n    />\n    <v-progress-circular v-if=\"loading && !isFrozen\"\n      indeterminate\n      color=\"success\"\n    ></v-progress-circular> \n    <div class=\"tooltip\" :id=\"tooltipId\">\"></div>\n    <svg :id=\"id\" viewBox=\"0 0 660 500\"></svg>\n  </v-card>\n</template>\n\n<script>\nimport * as d3 from \"d3\";\nimport ChartControls from \"../ChartControls.vue\";\nimport {\n  handleFilterClick,\n  isFiltered,\n  nFormatter\n} from \"../../helperFunctions/graphHelperFunctions\";\nexport default {\n  components: { ChartControls },\n  name: \"TreeMap\",\n  props: {\n    data: {\n      required: true,\n    },\n    width: {\n      default: 660,\n      type: Number,\n    },\n    height: {\n      default: 500,\n      type: Number,\n    },\n    chartNumber: {\n      required: true,\n      type: Number,\n    },\n    isSummary: {\n      required: true,\n      type: Boolean,\n    },\n        isFrozen: {\n      required: true,\n      type: Boolean\n    }\n  },\n  data: () => ({\n    margin: { top: 10, right: 10, bottom: 0, left: 10 },\n  }),\n\n  computed: {\n    id() {\n      return \"chart\" + this.chartNumber.toString();\n    },\n    tooltipId() {\n      return \"tooltip\" + this.chartNumber.toString();\n    },\n\n    filterSet() {\n      return this.$store.getters[\"filterByType\"](this.data.filterType);\n    },\n\n    negativeFilterSet() {\n      return this.$store.getters[\"negativeFilterByType\"](this.data.filterType);\n    },\n\n    payload() {\n      return this.data.payload;\n    },\n       loading(){\n      return this.data.loading\n    },\n    \n    chartWidth() {\n      return this.width - this.margin.left - this.margin.right;\n    },\n    chartHeight() {\n      return this.height - this.margin.top - this.margin.bottom;\n    },\n\n  },\n  watch: {\n    payload: function () {\n      if (this.isFrozen) {\n        return;\n      } else {\n        this.updateChart();\n      }\n    },\n        isFrozen: function() {\n      if (this.isFrozen) {\n        return\n      }\n      else {\n        this.updateChart();\n      }\n    },\n\n\n    filterSet: function () {\n      this.changeFilter();\n    },\n    negativeFilterSet: function () {\n      this.changeFilter();\n    },\n  },\n\n  mounted() {\n    this.createTreeMap();\n  },\n\n  methods: {\n    createTreeMap() {\n      var svg = d3.select(\"#\" + this.id).append(\"g\");\n      svg.append(\"g\").attr(\"class\", \"rects\");\n      svg.append(\"g\").attr(\"class\", \"foreignObjects\");\n      svg.attr(\n          \"transform\",\n          \"translate(\" + this.margin.left + \",\" + this.margin.top + \")\"\n        );\n    },\n\n    updateChart() {\n      var svg = d3.select(\"#\" + this.id);\n      let tooltip = d3.select(\"#\" + this.tooltipId);\n \n     if (this.payload.length == 0) {\n        svg.selectAll(\"rect\").remove();\n        svg.selectAll(\"foreignObject\").remove();\n        return;\n      }\n\n      var vm = this;\n\n      let hierarchy = d3\n        .hierarchy(this.payload, (node) => {\n          return node;\n        })\n        .sum((node) => {\n          return node[\"value\"];\n        });\n\n\n      var color = d3\n        .scaleOrdinal()\n        .domain(\n          this.payload.map(function (d) {\n            return d.name;\n          })\n        )\n        .range([\n          \"var(--v-primary-base)\",\n          \"var(--v-secondary-base)\",\n          \"var(--v-tertiary-base)\",\n        ]);\n\n      var treemap = d3\n        .treemap()\n        .size([this.chartWidth, this.chartHeight])\n        .padding(1)\n        .round(true);\n\n      treemap(hierarchy);\n\n      let tiles = hierarchy.leaves();\n\n      var block = svg.select(\"g.rects\").selectAll(\"rect\").data(tiles);\n\n      block\n        .enter()\n        .insert(\"rect\")\n        .attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`)\n        .attr(\"opacity\", function (d) {\n          if (\n            (!vm.filterSet || (vm.filterSet.size == 0) && (vm.negativeFilterSet.size == 0)) ||\n            isFiltered(d.data, vm)\n          ) {\n            return 1;\n          } else {\n            return 0.5;\n          }\n        })\n        .attr(\"fill\", (d) => {\n          return color(d.data.name);\n        })\n        .attr(\"width\", (d) => {\n          return d.x1 - d.x0;\n        })\n        .attr(\"height\", (d) => {\n          return d.y1 - d.y0;\n        });\n      block\n        .transition()\n        .duration(1000)\n        .attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`)\n        .attr(\"width\", (d) => d.x1 - d.x0)\n        .attr(\"opacity\", function (d) {\n          if (\n            (!vm.filterSet || (vm.filterSet.size == 0) && (vm.negativeFilterSet.size == 0)) ||\n            isFiltered(d.data, vm)\n          ) {\n            return 1;\n          } else {\n            return 0.5;\n          }\n        })\n        .attr(\"height\", (d) => d.y1 - d.y0);\n\n      block.exit().remove();\n\n      var text = svg\n        .select(\"g.foreignObjects\")\n        .selectAll(\"foreignObject\")\n        .data(tiles);\n      text\n        .enter()\n        .insert(\"foreignObject\")\n        .attr(\"x\", (d) => d.x0)\n        .attr(\"y\", (d) => d.y0)\n        .attr(\"width\", (d) => {\n          return d.x1 - d.x0;\n        })\n        .attr(\"height\", (d) => {\n          return d.y1 - d.y0;\n        })\n        .style(\"fill\", \"var(--v-text-base)\")\n        .html((d) => {\n          let value = d.data.value\n            .toString()\n            .replace(/\\B(?=(d{3})+(?!\\d))/g, \",\");\n          return (\n            \"<div><p>\" +\n            d.data.name +\n            \" | \" +\n            nFormatter(value,2) +\n            \" | \" +\n            ((value / d.parent.value) * 100).toFixed(1) +\n            \" %</p></div>\"\n          );\n        })\n        .on(\"mouseover\", function (event, d) {\n          var svgDim = svg.node().getBoundingClientRect();\n          var height = (svgDim.height / vm.height) * d.y0;\n          var width = (svgDim.width / vm.width) * d.x0;\n\n          let value = d.data.value\n            .toString()\n            .replace(/\\B(?=(d{3})+(?!\\d))/g, \",\");\n          tooltip.transition().duration(1000).style(\"opacity\", 0.8);\n          tooltip\n            .html(\n              '<p class=\"subtitle-2 white--text\">' +\n                d.data.name +\n                \" | \" +\n                 nFormatter(value,2) +\n                \" | \" +\n                ((value / d.parent.value) * 100).toFixed(1) +\n                \" %</p>\"\n            )\n            .style(\"left\", width + \"px\")\n            .style(\"top\", height + \"px\");\n        })\n         .on(\"mouseout\", function() {\n            tooltip.transition()\t\t\n                .duration(500)\t\t\n                .style(\"opacity\", 0);\t\n        })\n        .on(\"click\", function (d, filter) {\n          handleFilterClick(vm, filter.data);\n        });\n      text\n        .transition()\n        .duration(1000)\n        .attr(\"x\", (d) => d.x0)\n        .attr(\"y\", (d) => d.y0)\n        .attr(\"width\", (d) => {\n          return d.x1 - d.x0;\n        })\n        .attr(\"height\", (d) => {\n          return d.y1 - d.y0;\n        })\n        .attr(\"opacity\", function (d) {\n          if (\n            (!vm.filterSet || (vm.filterSet.size == 0) && (vm.negativeFilterSet.size == 0)) ||\n            isFiltered(d.data, vm)\n          ) {\n            return 1;\n          }\n          return 0.5;\n        })\n        .each(function () {\n          d3.select(this).html((d) => {\n            let value = d.data.value\n              .toString()\n              .replace(/\\B(?=(d{3})+(?!\\d))/g, \",\");\n            return (\n              \"<div><p>\" +\n              d.data.name +\n              \" | \" +\n               nFormatter(value,2)  +\n              \" | \" +\n              ((value / d.parent.value) * 100).toFixed(1) +\n              \" %</p></div>\"\n            );\n          });\n        });\n\n      text.exit().remove();\n    },\n\n    changeFilter() {\n      const vm = this;\n      var svg = d3.select(\"#\" + this.id);\n      svg.selectAll(\"rect\").attr(\"opacity\", function (d) {\n        if (\n          (!vm.filterSet || (vm.filterSet.size == 0) && (vm.negativeFilterSet.size == 0)) ||\n          isFiltered(d.data, vm)\n        ) {\n          return 1;\n        }\n        return 0.5;\n      });\n      svg.selectAll(\"foreignObject\").attr(\"opacity\", function (d) {\n        if (\n          (!vm.filterSet || (vm.filterSet.size == 0) && (vm.negativeFilterSet.size == 0)) ||\n          isFiltered(d.data, vm)\n        ) {\n          return 1;\n        }\n        return 0.5;\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\ndiv.tooltip {\n  position: absolute;\n  text-align: center;\n  padding: 2px;\n  font: 12px sans-serif;\n  background: black;\n  border: 0px;\n  border-radius: 8px;\n  pointer-events: none;\n  opacity: 0;\n}\n</style>"]}]}